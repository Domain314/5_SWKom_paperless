/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.1.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package at.fhtw.swkom.paperless.controller;

import java.io.File;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-10-03T14:12:32.231573Z[Etc/UTC]")
@Validated
@Tag(name = "files", description = "Routing for Files")
public interface FilesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /files/findByName/{name} : Delete file
     * Only be done by the logged in user.
     *
     * @param name Name to be deleted (required)
     * @return Successful operation (status code 200)
     *         or Invalid name supplied (status code 400)
     *         or File not found (status code 404)
     */
    @Operation(
        operationId = "deleteFile",
        summary = "Delete file",
        description = "Only be done by the logged in user.",
        tags = { "files" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = File.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid name supplied"),
            @ApiResponse(responseCode = "404", description = "File not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/files/findByName/{name}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<File> deleteFile(
        @Parameter(name = "name", description = "Name to be deleted", required = true, in = ParameterIn.PATH) @PathVariable("name") String name
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"size\" : 100, \"data\" : \"data\", \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"Testname_1\", \"modified\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : 10, \"type\" : \"pdf\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /files : get all files
     * Get all files
     *
     * @return successful operation (status code 200)
     *         or Bad request (status code 400)
     */
    @Operation(
        operationId = "findFiles",
        summary = "get all files",
        description = "Get all files",
        tags = { "files" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = File.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/files",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<File>> findFiles(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"size\" : 100, \"data\" : \"data\", \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"Testname_1\", \"modified\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : 10, \"type\" : \"pdf\" }, { \"size\" : 100, \"data\" : \"data\", \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"Testname_1\", \"modified\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : 10, \"type\" : \"pdf\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /files/findByName/{name} : Find files by name
     * Many names, string, sep by comma
     *
     * @param name Names for filtering (required)
     * @return successful operation (status code 200)
     *         or Invalid name (status code 400)
     */
    @Operation(
        operationId = "findFilesByName",
        summary = "Find files by name",
        description = "Many names, string, sep by comma",
        tags = { "files" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = File.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid name")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/files/findByName/{name}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<File>> findFilesByName(
        @Parameter(name = "name", description = "Names for filtering", required = true, in = ParameterIn.PATH) @PathVariable("name") String name
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"size\" : 100, \"data\" : \"data\", \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"Testname_1\", \"modified\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : 10, \"type\" : \"pdf\" }, { \"size\" : 100, \"data\" : \"data\", \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"Testname_1\", \"modified\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : 10, \"type\" : \"pdf\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /files : update a file
     * update a file
     *
     * @param file update a file (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or File not found (status code 404)
     *         or Validation exception (status code 405)
     */
    @Operation(
        operationId = "updateFile",
        summary = "update a file",
        description = "update a file",
        tags = { "files" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = File.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "File not found"),
            @ApiResponse(responseCode = "405", description = "Validation exception")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/files",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<File> updateFile(
        @Parameter(name = "File", description = "update a file", required = true) @Valid @RequestBody File file
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"size\" : 100, \"data\" : \"data\", \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"Testname_1\", \"modified\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : 10, \"type\" : \"pdf\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /files : upload a new file
     * upload a new file
     *
     * @param file upload a new file (required)
     * @return Successful operation (status code 200)
     *         or Invalid input (status code 405)
     */
    @Operation(
        operationId = "uploadFile",
        summary = "upload a new file",
        description = "upload a new file",
        tags = { "files" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = File.class))
            }),
            @ApiResponse(responseCode = "405", description = "Invalid input")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/files",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<File> uploadFile(
        @Parameter(name = "File", description = "upload a new file", required = true) @Valid @RequestBody File file
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"size\" : 100, \"data\" : \"data\", \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"Testname_1\", \"modified\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : 10, \"type\" : \"pdf\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
